# version: 1.1.5

## Constants
. ~/.user-env-const

## Alias

## Paths´
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias cd..="cd .."
alias cd...="cd ../.."
alias cd....="cd ../../.."
alias cd.....="cd ../../../.."
alias cd......="cd ../../../../.."

alias cdd="cd $DESKTOP"
alias cdws="cd $WORKSPACE"
alias cdgit="cd $WORKSPACE"
alias cddl="cd $DOWNLOADS"

## Grep
alias grepi="grep -i" # ignore case
alias grepv="grep -v" # search for lines that does not contain ...
alias grepn="grep -n" # display line numbers

## General
alias ll="ls -la"
alias la="ls -a"
alias l="ls -la"
alias infogit='cat ~/.user-env | grep "=\"git"'
alias infodocker='cat ~/.user-env | grep "=\"docker "'
alias infodc='cat ~/.user-env | grep "=\"docker-compose "'
alias infogrep='cat ~/.user-env | grep "=\"grep "'
alias git?='infogit'
alias docker?='infodocker'
alias docker-compose?='infodc'
alias grep?='infogrep'
alias info="cat ~/.user-env | grep '#info'"

# docker images | grep "atlassian" | sed -nEe 's/^.*([a-f0-9]{12}).*$/\1/p' | xargs docker rmi -f

## Git
alias ga="git add"
alias gaa="git add --all"
alias gc="git commit"
alias gac="git commit -a -m"
alias gs="git status"

### Push
alias gp="git push"
alias gpom="git push -u origin master"
alias gpuo='git push -u origin "$(git rev-parse --abbrev-ref HEAD)"'

### Branches
alias gb="git branch"
alias gba="git branch -a"
alias gbd="git branch -d"
alias gpod="git push origin --delete" # deletes remote branch
alias grpo="git remote prune origin" # delete local remote branch orphans
alias gbda="git branch --merged | grep -v '\*' | grep -v 'master' | xargs -n 1 git branch -d"
alias gbdar="git fetch -p && for branch in `git branch -vv --no-color | grep ': gone]' | awk '{print $1}'`; do git branch -D $branch; done" # deletes all branches that are not on remote

alias gd="git diff"
alias gco="git checkout"
alias gcom="git checkout master"
alias gcod='git checkout development' 
alias gps='echo -e "\\n- Pushing -\\n" && git push && echo -e "\\n- Pushed -\\n" && echo -e "\\n- Status -\\n" && gs && echo -e "\\n- Done -"'
alias wdi='git log --since=5.days --author="$GIT_NAME" --oneline --shortstat'

# Yarn
alias yarnclean="rm -rf node_modules && rm -f yarn.lock && yarn"
alias ycc="yarn cache clean"

## Docker
alias dcs="docker ps" # docker container status
alias dkc="docker ps -aq | xargs docker stop" # docker kill containers, stops all containers
alias dac="docker ps -aq | xargs docker rm" # docker annihilate containers, erases all containers
alias dsp="docker system prune --volumes -f" # delete containers that should be removed already, like git prune deletes branches that are dead anyways. frees space
alias dkai="docker images -f "dangling=true" -q | xargs docker image rm"

## Docker Compose
alias dcu="docker-compose up"
alias dcud="docker-compose up -d"
alias dcr="docker-compose rm"
alias dcps="docker-compose ps"

## User Environment
alias local_env_version='grep -m 1 "# version:" ~/.user-env | sed "s/[^.] version: //"'
alias latest_env_version='curl -s https://raw.githubusercontent.com/Sly321/home/master/.user-env | tac | tac | grep -m 1 "# version:" | sed "s/# version: //"'
alias env_versions='echo "Local version: $(local_env_version) - Latest version: $(latest_env_version)"'

function update_user_env {
    echo "Updating from: $(local_env_version) to $(latest_env_version)"
    curl -s https://raw.githubusercontent.com/Sly321/home/master/.user-env --output ~/.user-env && source ~/.user-env
    echo "Done - new local version: $(local_env_version)"
}

# Colors
LS_COLORS='rs=0:di=1;35:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lz=01;31:*.xz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.axv=01;35:*.anx=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.axa=00;36:*.oga=00;36:*.spx=00;36:*.xspf=00;36:';
export LS_COLORS

# Function
extract () {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xjf $1        ;;
            *.tar.gz)    tar xzf $1     ;;
            *.bz2)       bunzip2 $1       ;;
            *.rar)       rar x $1     ;;
            *.gz)        gunzip $1     ;;
            *.tar)       tar xf $1        ;;
            *.tbz2)      tar xjf $1      ;;
            *.tgz)       tar xzf $1       ;;
            *.zip)       unzip $1     ;;
            *.Z)         uncompress $1  ;;
            *.7z)        7z x $1    ;;
            *)           echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

function gfc {
    if [ $# -eq 1 ]
        then
            echo -e "\\n- Add -\\n"
            gaa
            echo -e "\\n- Added -\\n"
            echo -e "\\n- Commit -\\n"
            gc -m "$1"
            echo -e "\\n- Commited -\\n"
            echo -e "\\n- Pull -\\n"
            git pull
            echo -e "\\n- Pulled -\\n"
            gps
    else
        echo "Bitte ein Argument übergeben."
    fi
}

get_branch_context() {
    echo -n "$(git rev-parse --abbrev-ref HEAD | sed -n 's/^.*\/\(.*\)\/\([a-Z]*\)-\([0-9]*\).*$/\2-\3/p')"
}

function gfce {
    if [ $# -eq 1 ]
        then
            echo -e "\\n- Add -\\n"
            gaa
            echo -e "\\n- Added -\\n"
            echo -e "\\n- Commit -\\n"
            gc -m "$(get_branch_context) - $1"
            echo -e "\\n- Commited -\\n"
            echo -e "\\n- Pull -\\n"
            git pull
            echo -e "\\n- Pulled -\\n"
            gps
    else
        echo "Bitte ein Argument übergeben."
    fi
}

## Create .gitignore
alias gitignore_node='echo -e "### Node ###\n\n# Logs\nlogs\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n\n# Optional npm cache directory\n.npm\n\n# Dependency directories\n/node_modules\n/jspm_packages\n/bower_components\n\n# Yarn Integrity file\n.yarn-integrity\n\n# Optional eslint cache\n.eslintcache\n\n# dotenv environment variables file(s)\n.env\n.env.*\n\n#Build generated\ndist/\nbuild/\n\n# Serverless generated files\n.serverless/\n\n### SublimeText ###\n# cache files for sublime text\n*.tmlanguage.cache\n*.tmPreferences.cache\n*.stTheme.cache\n\n# workspace files are user-specific\n*.sublime-workspace\n\n# project files should be checked into the repository, unless a significant\n# proportion of contributors will probably not be using SublimeText\n# *.sublime-project\n\n\n### VisualStudioCode ###\n.vscode/*\n!.vscode/settings.json\n!.vscode/tasks.json\n!.vscode/launch.json\n!.vscode/extensions.json\n\n### Vim ###\n*.sw[a-p]\n\n### WebStorm/IntelliJ ###\n/.idea\nmodules.xml\n*.ipr\n*.iml\n\n\n### System Files ###\n*.DS_Store\n\n# Windows thumbnail cache files\nThumbs.db\nehthumbs.db\nehthumbs_vista.db\n\n# Folder config file\nDesktop.ini\n\n# Recycle Bin used on file shares\n$RECYCLE.BIN/\n\n# tslint\nreports/\n\n# Thumbnails\n._*\n\n# Files that might appear in the root of a volume\n.DocumentRevisions-V100\n.fseventsd\n.Spotlight-V100\n.TemporaryItems\n.Trashes\n.VolumeIcon.icns\n.com.apple.timemachine.donotpresent" >> .gitignore'

## PS1
git_branch() {
    echo -n '(' && git branch 2>/dev/null | grep '^*' | colrm 1 2 | tr -d '\n' && echo -n ')'
}

git_string() {
    echo -n '' && git_branch
}

git_string_cutted() {
    git_string | sed 's/()//'
}

export PS1="\[\e]0;\w\a\]\n\[\e[32m\]\u \[\e[33m\]\w\[\e[0m\] \033[0;36m\$(git_string_cutted)\033[0m \n\$ "

#info du -sh # größte des momentanen folders
#info du -sh * # current file system
#info du -sh * | grep M # nur megabyte
#info df # alles was gemounted ist
#info df -h # file system / festplatte
#info fdisk -l #

export DOCKER_HOST="tcp://0.0.0.0:2375"

## Custom
. ~/.user-env-custom
